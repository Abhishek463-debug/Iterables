set1 = {7,1,2,3,4,5,6}
set2 = {4,5,6,10,11,12,13}

#intersection, union, difference, symmetric difference can take any type of iterable as argument. (it converts argument into list) set1.intersection(list_also_works)

#Operators only take same type of iterables as inputs for result (set1&set2), (set1|set2), list1&list2, list1 - list2


print(set1.union(set2))
print(set1|set2)
print(len(set1)) #Length of set1

#Updating set1 with another iterable (string, list)
set1.update([100,111,112,3])
#(OR)
set1.update({100,111,111,30,2})
print(set1)


set1.add(23)
print(set1)
set1.remove(1)
print(set1)

#Using remove vs discard for element that doesn't exist in set
try:
    set1.remove(1)
except:
    print("Error was raised because 1 doesn't exist in set1.")

set1.discard(1)
print("1 is not in set1, so nothing happens, not even an error.")

print(set1.pop())
#First number in set is popped. Python might've been updated to store elements in order in sets

set10 = {"Abhishek", "Zoey", "Brian"}
print(set10)

#Disjoint sets? If intersection of set1 and set2 (i.e. set1 & set2 or set1.intersection(set2) is None)
print(set1.isdisjoint(set2))

s1 = {1,2,3}
s2 = {2,3}
print(s1.intersection(s2) == s2)
print(s2.issubset(s1))


#Intersection
print(set1.intersection(set2))
print(set1 & set2)

#Difference
print(set1.difference(set2))
print(set1 - set2)

#Symettric Difference (in set1 or set2 but not in set1 and set2)

print(set1.symmetric_difference(set2))
print(set1 ^ set2)


# There is also difference_update, symmetric_difference_update, and intersection_update but not union_update. (Saves memory) We can also do set1 = set1.difference(set2), though.
